#!/usr/bin/env python3
# compare_files.py
# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ –∏–º–µ–Ω–∏

import os
import json
from dataclasses import dataclass, field
from typing import List, Dict

@dataclass
class Processed_Files:
    name: str  # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –≤ —Ñ–∞–π–ª–µ configLLM.json

@dataclass
class ConfigLLM:
    processed_files: List[Processed_Files] = field(default_factory=list)
    prompts: List[dict] = field(default_factory=list)

    @classmethod
    def from_dict(cls, data: Dict):
        processed_files = [Processed_Files(**f) for f in data.get("processed_files", [])]
        # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º—Ç—ã –∫–∞–∫ –µ—Å—Ç—å
        return cls(processed_files=processed_files)

    def to_dict(self):
        return {
            "processed_files": [file.__dict__ for file in self.processed_files],
            "prompts": self.prompts
        }


class FileComparator:
    def __init__(self, user_name: str, user_data_dir: str = "user_data"):
        self.user_name = user_name
        self.user_data_dir = user_data_dir
        self.user_folder = os.path.join(self.user_data_dir, self.user_name)
        self.pdf_folder = os.path.join(self.user_folder, "pdf")
        self.config_path = os.path.join(self.user_folder, "configLLM.json")

    def get_all_filenames_in_pdf_folder(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –∏–º—è) –∏–∑ –ø–∞–ø–∫–∏ pdf."""
        if not os.path.exists(self.pdf_folder):
            print(f"‚ùå –ü–∞–ø–∫–∞ PDF –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.pdf_folder}")
            return []

        valid_extensions = {'.pdf', '.docx', '.pptx'}
        try:
            files = [
                f for f in os.listdir(self.pdf_folder)
                if os.path.isfile(os.path.join(self.pdf_folder, f))
                and os.path.splitext(f.lower())[1] in valid_extensions
            ]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {self.pdf_folder}")
            return files  # —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞: 'doc.pdf', 'file.docx'
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}")
            return []

    def get_processed_filenames_from_config(self) -> List[str]:
        """–ß–∏—Ç–∞–µ—Ç configLLM.json –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –∏–º—è)."""
        if not os.path.exists(self.config_path):
            print(f"‚ö†Ô∏è  –§–∞–π–ª configLLM.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_path}")
            print("–ë—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç.")
            return []

        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            config = ConfigLLM.from_dict(data)
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
            processed_names = [os.path.basename(file.name) for file in config.processed_files]
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed_names)} –∑–∞–ø–∏—Å–µ–π –∏–∑ configLLM.json")
            return processed_names
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ configLLM.json: {e}")
            return []

    def compare(self) -> dict:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        current_files = set(self.get_all_filenames_in_pdf_folder())
        processed_files = set(self.get_processed_filenames_from_config())

        return {
            "new": sorted(current_files - processed_files),  # –µ—Å—Ç—å –≤ –ø–∞–ø–∫–µ, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            "already_processed": sorted(current_files & processed_files),  # —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            "missing_in_folder": sorted(processed_files - current_files),  # –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –Ω–æ –∏—Å—á–µ–∑–ª–∏ –∏–∑ –ø–∞–ø–∫–∏
        }

    def print_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –∫–æ–Ω—Å–æ–ª—å."""
        print("\n" + "="*60)
        print(f"–°–†–ê–í–ù–ï–ù–ò–ï –§–ê–ô–õ–û–í: {self.user_name}")
        print("="*60)

        result = self.compare()

        # 1. –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã (—Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        print(f"\nüÜï –ù–û–í–´–ï –§–ê–ô–õ–´ (–µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã): {len(result['new'])}")
        for name in result['new']:
            print(f"   ‚Ä¢ {name}")

        # 2. –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        print(f"\n‚úÖ –£–ñ–ï –û–ë–†–ê–ë–û–¢–ê–ù–´: {len(result['already_processed'])}")
        for name in result['already_processed']:
            print(f"   ‚Ä¢ {name}")

        # 3. –ü—Ä–æ–ø–∞–≤—à–∏–µ —Ñ–∞–π–ª—ã
        print(f"\nüóëÔ∏è  –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –í –ü–ê–ü–ö–ï (–Ω–æ –≤ configLLM): {len(result['missing_in_folder'])}")
        for name in result['missing_in_folder']:
            print(f"   ‚Ä¢ {name}")

        print("\n" + "="*60)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not result['new'] and not result['missing_in_folder']:
            print("üìå –°–∏—Å—Ç–µ–º–∞ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        elif result['new']:
            print(f"üìå –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É: –Ω–∞–π–¥–µ–Ω–æ {len(result['new'])} –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        else:
            print("üìå –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å configLLM –æ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã—Ö.")


# =============================
# –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê
# =============================

if __name__ == "__main__":
    # === –ù–ê–°–¢–†–û–ô–ö–ê ===
    USER_NAME = "ae05d4f9-f962-486f-8166-098106dc8fb1"  # ‚Üê –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ –∏–º—è
    USER_DATA_DIR = "user_data"  # –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ user_data

    # –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—á—ë—Ç
    comparator = FileComparator(user_name=USER_NAME, user_data_dir=USER_DATA_DIR)
    comparator.print_report()