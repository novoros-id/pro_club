import telebot
import telebot.types
import threading
import uvicorn
import request  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º!
import os
import tempfile
import mimetypes
import time
import pandas
import datetime

from fastapi import FastAPI
from config import settings
from concurrent.futures import ThreadPoolExecutor
from models import SimpleResponse
from pipeline import TestPipelineRunner, update_prime_file
import rag_metrick

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
app = FastAPI()
bot = telebot.TeleBot(settings.TELEGRAM_TOKEN)
chat_id = 0

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
request_chat_map = {}

# –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ chat_id
user_history = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
pipeline_state = {} 

# –û–±—ä–µ–∫—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
executor = ThreadPoolExecutor(max_workers=3)

max_telegram_message_length = 3800

# ---= –ö–õ–ê–°–° –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–û–ì–ê–ú–ò =---
class LogManager:
    def __init__(self, logs_folder_path, logs_folder_pipeline, logs_file_name):
        self.logs_folder_path = logs_folder_path
        self.logs_folder_pipeline = logs_folder_pipeline
        self.logs_file_name = os.path.join(logs_folder_path, logs_file_name)
        self.logs = self._initialize_logs()

    def _initialize_logs(self):
        if not os.path.exists(self.logs_folder_path):
            os.makedirs(self.logs_folder_path)
        if not os.path.exists(self.logs_file_name):
            logs = pandas.DataFrame(columns=['request_time', 'chat_id', 'message_id', 'user_name', 'request_text', 'response_time', 
                                             'response_text', 'used_files', 'rating'])
            logs.to_csv(self.logs_file_name, index=False, encoding='utf-8')
            return logs    
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á–∏—Ç–∞–µ–º –µ–≥–æ    
        try:
            return pandas.read_csv(self.logs_file_name, encoding='utf-8')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
            return pandas.DataFrame(columns=['request_time', 'chat_id', 'message_id', 'user_name', 'request_text', 'response_time', 
                                             'response_text', 'used_files', 'rating'])

    # –ü—Ä–∏ $start_pipeline —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏
    def create_log_pipeline(self):
        current_time = datetime.datetime.now()
        log_file_name = f'test_pipeline_{current_time.strftime("%Y-%m-%d_%H-%M-%S")}.csv'
        log_file_path = os.path.join(self.logs_folder_pipeline, log_file_name)
        
        try:
            self.logs = pandas.DataFrame(columns=['request_time', 'chat_id', 'user_name', 'request_text', 'response_time', 'response_text', 'used_files', 'rating'])
            self.logs.to_csv(log_file_path, index=False, encoding='utf-8')
            self.logs_file_name = log_file_path
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–æ–≥–æ–≤: {e}')
            raise

        return log_file_name
    
    #–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ –≤–µ—Ä–Ω—ë–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ª–æ–≥ —Ñ–∞–π–ª—É
    def switch_to_main_logs(self):
        main_log_file_name = "bot_logs.csv"
        self.logs_file_name = os.path.join(self.logs_folder_path, main_log_file_name)
        self.logs = self._initialize_logs

    def log_rating(self, chat_id, message_id, rating):
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ rating –∏–º–µ–µ—Ç —Ç–∏–ø object
        if 'rating' in self.logs.columns and self.logs['rating'].dtype != 'object':
            self.logs['rating'] = self.logs['rating'].astype('object')

        # –û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –≤ –ª–æ–≥–∞—Ö –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ chat_id –∏ message_id
        if not self.logs.empty:
                self.logs.loc[
                    (self.logs['chat_id'] == chat_id) &
                    (self.logs['message_id'] == message_id), 'rating'
                ] = rating
                self.logs.to_csv(self.logs_file_name, index=False, encoding='utf-8')
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏
        try:
            self.logs.to_csv(self.logs_file_name, index=False, encoding='UTF-8')
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}')

    def log_interaction(self, request_time, chat_id, message_id, user_name, request_text, response_time, response_text, used_files_path, rating=None):
        used_files_str = ", ".join(os.listdir(used_files_path)) if os.path.exists(used_files_path) else "–ü–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤
        new_array = pandas.DataFrame([{
            'request_time'  : request_time,
            'chat_id'       : chat_id,
            'message_id'    : message_id,
            'user_name'     : user_name,
            'request_text'  : request_text,
            'response_time' : response_time,
            'response_text' : response_text,
            'used_files'    : used_files_str,
            'rating'        : rating
        }])

        if self.logs.empty:
            self.logs = new_array
        else:
            self.logs = pandas.concat([self.logs, new_array], ignore_index=True)

        try:
            self.logs.to_csv(self.logs_file_name, index=False, encoding='utf-8')
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}')

# –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç mmax_length, –¥–æ–±–∞–≤–ª—è—è '...' –≤ –∫–æ–Ω—Ü—É
def truncate_text(text, max_length=max_telegram_message_length):
    return text if len(text) <=max_length else text[:max_length] + "..."

@app.post("/process")
def process_request(data: SimpleResponse):
    request_id = data.code_uid.request_uid
    entry = request_chat_map.get(request_id)
    is_pipeline = entry.get("is_pipeline", False)

    if entry and is_pipeline:
        chat_id = entry["chat_id"]
        answer = data.answer
        query_text = entry["query_text"]
        message_id = entry["message_id"]
        user_name = entry["username"]
        request_time = entry["timestamp"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        entry["response"] = answer
        entry["status"] = "completed"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if chat_id not in user_history:
            user_history[chat_id] = []
        user_history[chat_id].append({
            "request_uid": request_id,
            "query": query_text,
            "response": answer,
            "timestamp": time.time(),
            "sources": getattr(data, "sources", [])
        })
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_text = truncate_text(answer)
        sources = getattr(data, "sources", None)

        if sources:
            response_text += "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join([f"- {s}" for s in sources])

        try:
            msg=bot.send_message(
                chat_id=chat_id,
                text=response_text,
                reply_to_message_id=message_id  # <-- –¥–µ–ª–∞–µ–º reply
                )
        except Exception as e:
            print(f"[ERROR] –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        state = pipeline_state.get(chat_id)
        if state:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            idx_question = state['idx'] + 1
            total = len(state['questions'])
            bot.send_message(chat_id, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {idx_question} –∏–∑ {total} –≤–æ–ø—Ä–æ—Å–æ–≤.")

        try:
            # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
            logs_manager.log_interaction(
                request_time    =request_time,
                chat_id         =chat_id,
                message_id      =msg.message_id,
                user_name       =user_name,
                request_text    =query_text,
                response_time   =datetime.datetime.now(),
                response_text   =response_text,
                used_files_path ="None",
                rating          =None
                )
        except Exception as e:
            print(f"[ERROR] –ü—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    elif entry:
        chat_id = entry["chat_id"]
        answer = data.answer
        query_text = entry["query_text"]
        message_id = entry["message_id"]
        user_name = entry["username"]
        request_time = entry["timestamp"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        entry["response"] = answer
        entry["status"] = "completed"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if chat_id not in user_history:
            user_history[chat_id] = []
        user_history[chat_id].append({
            "request_uid": request_id,
            "query": query_text,
            "response": answer,
            "timestamp": time.time(),
            "sources": getattr(data, "sources", [])
        })
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_text = truncate_text(answer)
        sources = getattr(data, "sources", None)

        if sources:
            response_text += "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join([f"- {s}" for s in sources])

        try:
            msg=bot.send_message(
                chat_id=chat_id,
                text=response_text,
                reply_to_message_id=message_id  # <-- –¥–µ–ª–∞–µ–º reply
                )
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard = telebot.types.InlineKeyboardMarkup()
            keyboard.add(
                telebot.types.InlineKeyboardButton('üëç', callback_data=f'rate_{chat_id}_{msg.message_id}_up'),
                telebot.types.InlineKeyboardButton('üëé', callback_data=f'rate_{chat_id}_{msg.message_id}_down')
                )
            
            #–î–æ–±–∞–≤–∏–º –∏–∫–æ–Ω–∫–∏ –≤ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=msg.message_id,
                reply_markup=keyboard
                )
        except Exception as e:
            print(f"[ERROR] –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        try:
            # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
            logs_manager.log_interaction(
                request_time    =request_time,
                chat_id         =chat_id,
                message_id      =msg.message_id,
                user_name       =user_name,
                request_text    =query_text,
                response_time   =datetime.datetime.now(),
                response_text   =response_text,
                used_files_path ="None",
                rating          =None
                )
        except Exception as e:
            print(f"[ERROR] –ü—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        print(f"–ó–∞–ø—Ä–æ—Å —Å ID {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    state = pipeline_state.get(chat_id)
    if state and state['idx'] < len(state['questions']):
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        state['idx'] += 1
        send_next_pipeline_question(chat_id)

    return {"status": "ok"}

logs_folder_path = settings.LOG_FOLDER
logs_folder_pipeline = settings.LOG_FOLDER_PIPELINE
logs_manager = LogManager(logs_folder_path, logs_folder_pipeline, 'bot_logs.csv')

# === –ö–Ω–æ–ø–∫–∏ ===
HELP_BUTTON = '–ü–æ–º–æ—â—å'
FILES_LIST_BUTTON = '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'
DELETE_FILES_BUTTON = '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'


# === –ö–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=['start'])
def send_welcome(message):
    first_name = message.from_user.first_name
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        telebot.types.KeyboardButton(text=HELP_BUTTON),
        telebot.types.KeyboardButton(text=FILES_LIST_BUTTON),
        telebot.types.KeyboardButton(text=DELETE_FILES_BUTTON),
    )
    bot.send_message(message.chat.id,
                     f"""–ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –æ—Ç–≤–µ—Ç.
–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, PPXT –∏–ª–∏ DOCX –∏ –∑–∞–¥–∞–≤–∞–π –ø–æ –Ω–∏–º –≤–æ–ø—Ä–æ—Å—ã.
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è –Ω–µ –ø–æ —Ç–µ–∫—Å—Ç–∞–º, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å [$]
–ï—Å–ª–∏ —É —Ç–µ–±—è –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±—Ä–∞—â–∞–π—Å—è –≤ –ö–ª—É–± –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 1–° –ü–†–û –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥""",
                     reply_markup=keyboard)


@bot.message_handler(commands=['help'])
def help_bot(message):
    bot.send_message(message.chat.id,
                     f'–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n'
                     f'1Ô∏è‚É£  {FILES_LIST_BUTTON} - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n'
                     f'2Ô∏è‚É£  {DELETE_FILES_BUTTON} - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ —Ñ–∞–π–ª–æ–≤')

@bot.message_handler(commands=['start_pipeline'])
def handle_start_pipeline(message):
    chat_id = message.chat.id
    zakroma_folder = settings.ZAKROMA_FOLDER
    task_folder = settings.TASK_FOLDER
    test_user_folder = settings.TEMP_TASK_FOLDER
    prime_path = os.path.join(task_folder, "prime.xlsx")


    # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ pipeline
    pipeline = TestPipelineRunner(zakroma_folder=zakroma_folder, task_folder=task_folder, test_user_folder=test_user_folder)
    result = pipeline.prepare(prime_path=prime_path)

    pipeline_state[chat_id] = {
        "questions": result.questions,
        "sources": result.sources,
        "idx": 0,
        "start_time": time.time()
    }

    # 2. –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ö–æ–¥ –ø–∞–π–ø–ª–∞–π–Ω–∞
    for step in (result.steps or []):
        bot.send_message(chat_id, step)
    if result.error:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ pipeline: {result.error}")
        return
    
    # 3. –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
    logs_manager.create_log_pipeline()

    # 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª: "–≤–æ–ø—Ä–æ—Å ‚Äî –∑–∞–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—Ç ‚Äî –ª–æ–≥"
    bot.send_message(chat_id, "–¢–µ—Å—Ç–æ–≤—ã–π pipeline –∑–∞–ø—É—â–µ–Ω! –û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
    send_next_pipeline_question(chat_id)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@bot.message_handler(content_types=['text'])
def handle_buttons(message):
    try:

        print("Chat ID:", message.chat.id)
        if is_user_in_chat(message.from_user.id) == False:
             bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª !')
             return

        if message.chat.type != 'private':
            me = bot.get_me()
            username = me.username
            if not message_to_the_bot(username, message.text):
                return
            else:
                username = settings.TELEGRAM_USER    
        elif settings.TELEGRAM_JUST_QUESTIONS:
            username = settings.TELEGRAM_USER
        else:
            username = message.from_user.username

        text = message.text.strip()
        chatID = message.chat.id

        if text == FILES_LIST_BUTTON:
            simpleRequest = request.prepare_request(username, text)
            request_data = {
                "chat_id": chatID,
                "query_text": text,
                "request_uid": simpleRequest.code_uid.request_uid,
                "status": "processing",
                "timestamp": datetime.datetime.now(),
                "response": None,
                "files": [],
                "message_id": message.message_id,
                "username": username,
                "is_pipeline": False
            }
            request_chat_map[simpleRequest.code_uid.request_uid] = request_data
            executor.submit(request.send_request, simpleRequest, '/api/v1/files/list')

        elif text == HELP_BUTTON:
            bot.send_message(message.chat.id,
                             f'–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n'
                             f'1Ô∏è‚É£  {FILES_LIST_BUTTON} - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n'
                             f'2Ô∏è‚É£  {DELETE_FILES_BUTTON} - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ —Ñ–∞–π–ª–æ–≤')

        elif text == DELETE_FILES_BUTTON:
            if settings.TELEGRAM_JUST_QUESTIONS:
                bot.send_message(chatID, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∫–ª—é—á–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º, –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã!')
            else:
                simpleRequest = request.prepare_request(username, text)
                request_data = {
                    "chat_id": chatID,
                    "query_text": text,
                    "request_uid": simpleRequest.code_uid.request_uid,
                    "status": "processing",
                    "timestamp": datetime.datetime.now(),
                    "response": None,
                    "files": [],
                    "message_id": message.message_id,
                    "username": username,
                    "is_pipeline": False
                }
                request_chat_map[simpleRequest.code_uid.request_uid] = request_data
                executor.submit(request.send_request, simpleRequest, '/api/v1/files/delete')

        elif not text.strip():
            bot.send_message(chatID, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å!')

        elif text.count('$') == 1:
            bot.send_message(chatID, '–ó–∞–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–∫—Å—Ç–∞–º. –°–µ–∫—É–Ω–¥—É, –¥—É–º–∞—é...')
            simpleRequest = request.prepare_request(username, text)
            request_data = {
                "chat_id": chatID,
                "query_text": text,
                "request_uid": simpleRequest.code_uid.request_uid,
                "status": "processing",
                "timestamp": datetime.datetime.now(),
                "response": None,
                "files": [],
                "message_id": message.message_id,
                "username": username
            }
            request_chat_map[simpleRequest.code_uid.request_uid] = request_data
            executor.submit(request.send_request, simpleRequest, '/api/v1/llm/free_answer')

        else:
            bot.send_message(chatID, '–°–µ–∫—É–Ω–¥—É, –¥—É–º–∞—é...')
            simpleRequest = request.prepare_request(username, text)
            request_data = {
                "chat_id": chatID,
                "query_text": text,
                "request_uid": simpleRequest.code_uid.request_uid,
                "status": "processing",
                "timestamp": datetime.datetime.now(),
                "response": None,
                "files": [],
                "message_id": message.message_id,
                "username": username,
                "is_pipeline": False
            }
            request_chat_map[simpleRequest.code_uid.request_uid] = request_data
            executor.submit(request.send_request, simpleRequest, '/api/v1/llm/answer')

    except Exception as e:
        print(f"[ERROR] handle_buttons: {e}")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ===
@bot.message_handler(content_types=['document'])
def handle_document(message):
    try:
        if message.chat.type != 'private':
            me = bot.get_me()
            username = me.username
            if not message_to_the_bot(username, message.text):
                return
            else:
                username = settings.TELEGRAM_USER 
        elif settings.TELEGRAM_JUST_QUESTIONS:
            username = settings.TELEGRAM_USER
        else:
            username = message.from_user.username

        chatID = message.chat.id
        file_info = bot.get_file(message.document.file_id)
        file_name = message.document.file_name

        if file_name == "prime.xlsx":
            try:
                print ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ prime.xlsx")
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                file_id = message.document.file_id
                file_info = bot.get_file(file_id)
                downloaded_file = bot.download_file(file_info.file_path)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_file_path = os.path.join(settings.TEMP_TASK_FOLDER, file_name)
                with open(temp_file_path, 'wb') as new_file:
                    new_file.write(downloaded_file)
                msg = update_prime_file(
                    temp_file_path=temp_file_path,
                    task_folder=settings.TASK_FOLDER,
                    zakroma_folder=settings.ZAKROMA_FOLDER
                )
                bot.send_message(chatID, msg)

                prime_path = os.path.join(settings.TASK_FOLDER, 'prime.xlsx')
                df = pandas.read_excel(prime_path)
                required_files = list(df["Source"].unique())
                test_username = "test_user_pipeline"
                for src_file in required_files:
                    zakroma_path = os.path.join(settings.ZAKROMA_FOLDER, src_file)
                    if not os.path.exists(zakroma_path):
                        bot.send_message(chatID, f"–§–∞–π–ª {src_file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ zakroma_folder!")
                        continue
                    with open(zakroma_path, "rb") as f:
                        file_bytes = f.read()
                    upload_document(chatID, src_file, file_bytes, test_username, bot, request, request_chat_map)
            except Exception as e:
                bot.send_message(chatID, e)
            return
        
        elif settings.TELEGRAM_JUST_QUESTIONS:
            bot.send_message(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∫–ª—é—á–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º, –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã!")

        else:
            file_id = message.document.file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            upload_document(chatID, file_name, downloaded_file, username, bot, request, request_chat_map)
    except Exception as e:
        print(f"[ERROR] handle_document: {e}")

def upload_document(chatID, file_name, downloaded_file, username, bot, request, request_chat_map, message_id=None):
    with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(file_name)[1]) as temp_file:
        file_path = temp_file.name
        temp_file.write(downloaded_file)
        mime_type, _ = mimetypes.guess_type(file_path)
        if mime_type is None:
            mime_type = 'application/octet-stream'

        with open(file_path, 'rb') as file:
            files = [('files', (file_name, file.read(), mime_type))]

        request_form = request.prepare_request(username, "")
        request_data = {
            "chat_id": chatID,
            "query_text": "",
            "request_uid": request_form.code_uid.request_uid,
            "status": "processing",
            "timestamp": datetime.datetime.now(),
            "response": None,
            "files": [file_name],
            "message_id": message_id,
            "username": username,
            "is_pipeline": False
        }
        request_chat_map[request_form.code_uid.request_uid] = request_data
        response = request.send_file_request(files, request_form, '/api/v1/files/upload')
        if response.status_code != 200:
            bot.send_message(chatID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ '{file_name}': {response.text}")

        os.remove(file_path)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ ===
@bot.callback_query_handler(func=lambda call: call.data.startswith('rate_'))
def handle_rating(call):
    parts = call.data.split('_')
    chat_id = int(parts[1])
    message_id = int(parts[2])
    rating = 'up' if parts[3] == 'up' else 'down'
    logs_manager.log_rating(chat_id, message_id, rating)
    bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def message_to_the_bot(bot_username, text):
    text = text.strip().lower()
    bot_username = bot_username.strip().lower()
    return f"@{bot_username}" in text

def is_user_in_chat(user_id):
    if not chat_id or chat_id in [0, "0", "", " "]:
        return True
    
    try:
        chat_member = bot.get_chat_member(chat_id, user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
        return False

 # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ
def send_next_pipeline_question(chat_id):
    state = pipeline_state.get(chat_id)
    if not state:
        return

    idx = state['idx']
    questions = state['questions']
    sources = state['sources']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    if idx >= len(questions):
        bot.send_message(chat_id, "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –õ–æ–≥–∏ –∑–∞–ø–∏—Å–∞–Ω—ã.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        bot.send_message(chat_id, "–ó–∞–ø—É—Å–∫–∞—é –ø–æ–¥—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫.")
        # –ú–µ—Ç—Ä–∏–∫–∏
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º
        logs_folder_path = settings.LOG_FOLDER_PIPELINE      # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ config
        logs_file_name_pipeline = logs_manager.logs_file_name  # –∏–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞
        prime_path_file_name = os.path.join(settings.TASK_FOLDER, "prime.xlsx")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        file_metrick_ = metrick_start(
            logs_folder_path=logs_folder_path,
            logs_path_file_name=logs_file_name_pipeline,
            prime_path_file_name=prime_path_file_name
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(file_metrick_, 'rb') as doc:
            bot.send_document(chat_id, doc)
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥
        logs_manager.switch_to_main_logs()
        return

    question = questions[idx]
    source = sources[idx]
    truncated_question = truncate_text(question)

    bot.send_message(chat_id, f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å ‚Ññ{idx+1}: {truncated_question}\n–§–∞–π–ª: {source}")

    username = "test_user_pipeline"
    simpleRequest = request.prepare_request(username, truncated_question)
    request_data = {
        "chat_id": chat_id,
        "query_text": truncated_question,
        "request_uid": simpleRequest.code_uid.request_uid,
        "status": "processing",
        "timestamp": datetime.datetime.now(),
        "response": None,
        "files": [source],
        "message_id": None,
        "username": username,
        "is_pipeline": True
    }
    request_chat_map[simpleRequest.code_uid.request_uid] = request_data

    executor.submit(request.send_request, simpleRequest, '/api/v1/llm/answer')

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ RAG –º–µ—Ç—Ä–∏–∫
def metrick_start (logs_folder_path, logs_path_file_name, prime_path_file_name):
    metrick = rag_metrick.rag_metrick(logs_folder_path, logs_path_file_name, prime_path_file_name)
    try:
        file_metrick = metrick.gmetrics()
    except:
        file_metrick = prime_path_file_name
        print(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ç—Ä–∏–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: {file_metrick}')
    return file_metrick

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º ===
def start_bot():
    while True:
        try:
            print("–ë–û–¢ –ó–ê–ü–£–©–ï–ù!")
            bot.polling(none_stop=True, interval=1)
        except Exception as e:
            print(f"[ERROR] –ë–æ—Ç —É–ø–∞–ª: {e}")
            bot.stop_polling()
            print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
        finally:
            bot.stop_polling()
            print("–ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù")


def start_fastapi():
    uvicorn.run(app, host="0.0.0.0", port=settings.TELEGRAM_PORT)


if __name__ == "__main__":
    bot_thread = threading.Thread(target=start_bot)
    bot_thread.start()

    start_fastapi()