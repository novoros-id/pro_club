import telebot
import threading
import uvicorn
from fastapi import FastAPI
from config import settings
import request
from models import SimpleResponse
import asyncio
import tempfile
import os
import mimetypes

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä requestId –∏ chatId
request_chat_map = {}

app = FastAPI()
@app.post("/process")
async def process_request(data: SimpleResponse):
    request_id = data.code_uid.request_uid
    chat_id = request_chat_map.get(request_id)

    if chat_id:
        bot.send_message(chat_id=chat_id, text=data.answer)
        # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        #–ø–æ–∫–∞ —É–±—Ä–∞–ª —Ç–∞–∫ –∫–∞–∫ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ä–±—Ä–∞–±–æ—Ç–∫–∏.
        #del request_chat_map[request_id]


HELP_BUTTON = '–ü–æ–º–æ—â—å'
FILES_LIST_BUTTON = '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'
DELETE_FILES_BUTTON = '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'

bot = telebot.TeleBot(settings.TELEGRAM_TOKEN)

# ---= –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î =---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    first_name = message.from_user.first_name

    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        telebot.types.KeyboardButton(text=HELP_BUTTON),
        telebot.types.KeyboardButton(text=FILES_LIST_BUTTON),
        telebot.types.KeyboardButton(text=DELETE_FILES_BUTTON),
    )

    bot.send_message(message.chat.id,
        f"""–ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –æ—Ç–≤–µ—Ç
        –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ DOCX –∏ –∑–∞–¥–∞–≤–∞–π –ø–æ –Ω–∏–º –≤–æ–ø—Ä–æ—Å—ã
        –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è –Ω–µ –ø–æ —Ç–µ–∫—Å—Ç–∞–º, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å [$]
        –ï—Å–ª–∏ —É —Ç–µ–±—è –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±—Ä–∞—â–∞–π—Å—è –≤ –ö–ª—É–± –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 1–° –ü–†–û –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ \n\n"""
        , reply_markup=keyboard
    )

@bot.message_handler(commands=['help'])
def help_bot(message):
    bot.send_message(message.chat.id, 
        f'–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n'
        f'1Ô∏è‚É£  {FILES_LIST_BUTTON} - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n'
        f'2Ô∏è‚É£  {DELETE_FILES_BUTTON} - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ —Ñ–∞–π–ª–æ–≤'
    )

# ---= –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –ö–û–ú–ê–ù–î =---
@bot.message_handler(content_types=['text'])
def handle_buttons(message):
    asyncio.run(handle_buttons_async(message))

async def handle_buttons_async(message):

    if  message.chat.type != 'private':
        me = bot.get_me()
        username = me.username #message.chat.title
        if message_to_the_bot(username, message.text) == False:
            return
    elif settings.TELEGRAM_JUST_QUESTIONS == True:
        username = settings.TELEGRAM_USER
    else: 
        username = message.from_user.username

    text = message.text.strip()
    chatID = message.chat.id
   
    #request_time = datetime.datetime.now()
    #input_user_files = io_file_operation.return_user_folder_input(username)

    if text == FILES_LIST_BUTTON:
        simpleRequest = request.prepare_request(username, text)
        request_chat_map[simpleRequest.code_uid.request_uid] = chatID
        await request.send_request(simpleRequest, '/api/v1/files/list')
    elif text == HELP_BUTTON:
        bot.send_message(message.chat.id, 
            f'–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n'
            f'1Ô∏è‚É£  {FILES_LIST_BUTTON} - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n'
            f'2Ô∏è‚É£  {DELETE_FILES_BUTTON} - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ —Ñ–∞–π–ª–æ–≤'
        )
    elif text == DELETE_FILES_BUTTON:
        if settings.TELEGRAM_JUST_QUESTIONS == False:
            simpleRequest = request.prepare_request(username, text)
            request_chat_map[simpleRequest.code_uid.request_uid] = chatID
            await request.send_request(simpleRequest, '/api/v1/files/delete')
        else:
            response_text =  '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∫–ª—é—á–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º, –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã!'
            bot.send_message(chatID, response_text)

    else:
        if not text.strip():
            response_text = (chatID, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å!')
            bot.send_message(chatID, response_text)

        elif text.startswith ('$'):
            bot.send_message(chatID, '–ó–∞–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–∫—Å—Ç–∞–º. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')
            simpleRequest = request.prepare_request(username, text)
            request_chat_map[simpleRequest.code_uid.request_uid] = chatID
            await request.send_request(simpleRequest, '/api/v1/llm/free_answer')

        else:
            bot.send_message (chatID, '–ó–∞–ø—Ä–æ—Å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–∞–º, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥—Ä—É–≥–∏–º –∑–∞–¥–∞—á–∞–º, –∞ –∫–æ–≥–¥–∞ —è –±—É–¥—É –≥–æ—Ç–æ–≤, —Ç–æ –í–∞–º –ø—Ä–∏–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ')
            simpleRequest = request.prepare_request(username, text)
            request_chat_map[simpleRequest.code_uid.request_uid] = chatID
            await request.send_request(simpleRequest, '/api/v1/llm/answer')
            """   try:
                db_helper = io_db.DbHelper(chat_id=chatID, user_name=username)
                answer = db_helper.get_answer(prompt=text)
                if answer:
                    response_text = f'–û—Ç–≤–µ—Ç: {answer}\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞:'

                    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
                    keyboard.add(
                        telebot.types.InlineKeyboardButton('üëç', callback_data=f'rate_{chatID}_up'),
                        telebot.types.InlineKeyboardButton('üëé', callback_data=f'rate_{chatID}_down')
                    )
                    bot.send_message(chatID, response_text, reply_markup=keyboard)
                    #–õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                    logs_manager.log_interaction(
                        request_time    =request_time,
                        chat_id         =chatID,
                        user_name       =username,
                        request_text    =text,
                        response_time   =datetime.datetime.now(),
                        response_text   =response_text,
                        used_files_path =input_user_files,
                        rating          =None
                    )

                else:
                    response_text = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç!'
                    bot.send_message(chatID, response_text)
            except Exception as e:
                response_text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.'
                bot.send_message(chatID, response_text)
                print(f'–û—à–∏–±–∫–∞ –≤ get_answer: {e}') """
    
# ---= –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í =---
@bot.message_handler(content_types=['document'])
def handle_document(message):
    asyncio.run(handle_document_async(message))

async def handle_document_async(message):
  
    if  message.chat.type != 'private':
        me = bot.get_me()
        username = me.username #message.chat.title
        if message_to_the_bot(username, message.text) == False:
            return
    elif settings.TELEGRAM_JUST_QUESTIONS == True:
        username = settings.TELEGRAM_USER
    else: 
        username = message.from_user.username

    chatID = message.chat.id
    file_info = bot.get_file(message.document.file_id)
    file_name = message.document.file_name

    if file_name == "prime.xlsx":
       # todo —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ
       """  print ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ prime.xlsx")
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        file_id = message.document.file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file_path = f"/tmp/{file_name}"
        with open(temp_file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        if not validate_file_structure(temp_file_path):
            os.remove(temp_file_path) #—É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            bot.send_message(chatID, "–û—à–∏–±–∫–∞: –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'request_text', 'response_text', 'Source'")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª 
        update_prime_file(temp_file_path, chatID) """
    else:
        if settings.TELEGRAM_JUST_QUESTIONS == False:
            dowloaded_file = bot.download_file(file_info.file_path)
            files = []
            with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(file_name)[1]) as temp_file:
                temp_file.write(dowloaded_file)
                file_path = temp_file.name
                mime_type, _ = mimetypes.guess_type(file_path)
                if mime_type is None:
                    mime_type = 'application/octet-stream'  # Default MIME type if unknown
                with open(file_path, 'rb') as file:
                    files.append(('files', (file_name, file.read(), mime_type)))
    
            request_form = request.prepare_request(username, "")
            request_chat_map[request_form.code_uid.request_uid] = chatID
            response = await request.send_file_request(files, request_form, '/api/v1/files/upload')
            if response.status_code == 200:
                pass
            else:
                bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ '{file_name}': {response.text}")

            os.remove(file_path)
        else:
            response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∫–ª—é—á–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º, –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã!"
            bot.send_message(chatID, response_text)


def start_bot():
    try:
        print("–ë–û–¢ –ó–ê–ü–£–©–ï–ù!")
        bot.polling(none_stop=True, interval=1)
    except Exception as e:
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ 
        print(f"–û—à–∏–±–∫–∞:{e}")
    finally:
        bot.stop_polling()
        print("–ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù")

def start_fastapi():
    uvicorn.run(app, host="127.0.0.2", port=8000)

def message_to_the_bot(bot_username, text):
    text = text.strip().lower()
    bot_username = bot_username.strip().lower()
    if f"@{bot_username}" in text:
        return True
    else:
        return False

if __name__ == "main":
    bot_thread = threading.Thread(target=start_bot)
    bot_thread.start()

#debug –ù—É–∂–µ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ –¥–µ–±–∞—à —á–∞—Ç
request_chat_map[settings.DEBUG_REQUEST_ID] = settings.DEBUG_TELEGRAM_CHAT_ID
